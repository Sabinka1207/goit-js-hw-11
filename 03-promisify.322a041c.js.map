{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","users","name","active","toggleUserState","allUsers","username","onResolve","onReject","map","user","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","id","logSuccess","logError","warn","amount","then","catch"],"mappings":";AACA,MAAMA,EAAQC,GAEL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KAMPD,EAAO,UAERH,KAKDK,EAASC,GAAQC,QAAQC,uBAAuBF,OAQhDG,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAcpBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAAQ,CAACc,EAAWC,KAQzBD,EAPiBF,EAASI,IAAIC,GAChCA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,MAoB7DC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GAChB,IAAIzB,QAAQ,CAAC0B,EAAWC,KAEvB7B,MAAAA,EAAQoB,EAA0B,IAAK,KAE/Cf,WAAW,KACUkB,KAAKE,SAAW,GAGjCG,EAAU,CAAEE,GAAIH,EAAYG,GAAIvB,KAAMP,IAEtC6B,EAAQF,EAAYG,KAErB9B,KAKC+B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAU/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAAMC,KAAKJ,GAAYK,MAAMJ,GAC/DN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ","file":"03-promisify.322a041c.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  // Change this function\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const isSuccess = false;\n      \n      if (isSuccess) {\n        resolve(ms);\n      } else {\n        reject(\"Error\");\n      }\n    }, ms)\n  })\n\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\n// delay(2000).then(logger); // Fulfilled after 2000ms\n// delay(1000).then(logger); // Fulfilled after 1000ms\n// delay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\n// const toggleUserState = (allUsers, username, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === username ? { ...user, active: !user.active } : user\n//   );\n//   callback(updatedUsers);\n// };\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\nconst toggleUserState = (allUsers, username) => {\n  return new Promise((onResolve, onReject) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    );\n\n      const check = true;\n      \n      if (check) {\n        onResolve(updatedUsers);\n      } else {\n        onReject(\"Error\");\n      }      \n\n  })\n\n};\n\n// The function should work like this\n// toggleUserState(users, 'Mango').then(console.table);\n// toggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  return new Promise((onSuccess, onError) => {\n  \n    const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess({ id: transaction.id, time: delay });\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n  })\n\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}